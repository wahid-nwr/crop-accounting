package controllers;

import play.Play;
import javax.persistence.Query;
import play.mvc.Http.Request;
import play.mvc.Http.Response;
import play.mvc.Http.Header;
import play.server.ServletWrapper;

import controllers.deadbolt.Deadbolt;
import controllers.deadbolt.ExternalRestrictions;
import controllers.deadbolt.JSON;

import play.Logger;
import play.data.FileUpload;
import play.data.validation.Validation;
import play.mvc.With;
import controllers.deadbolt.Unrestricted;

import play.db.*;
import java.sql.Connection;

import java.sql.ResultSet;
import java.sql.SQLException;

import java.util.List;
import java.util.ArrayList;
import javax.validation.Valid;

import models.CropCalenderTask;
import models.CropTaskMap;
import models.UserModel;

import java.util.Map;
import java.util.HashMap;
import java.util.*;

@With(Deadbolt.class)
public class CropManagement extends Controller {

    @ExternalRestrictions("Crop price")
    public static void createcropprice() {
		List<UserModel> users = UserModel.find("id <> 1").fetch();
		render(users);
    }
    @ExternalRestrictions("Item price")
    public static void createitemprice() {
		List<UserModel> users = UserModel.find("id <> 1").fetch();
		render(users);
    }
	@ExternalRestrictions("Calendar 1")
    public static void cropcalender() {
		List<UserModel> users = UserModel.find("id <> 1").fetch();
		render(users);
    }
    @ExternalRestrictions("Calendar 2")
    public static void cropcalender2() {
		List<UserModel> users = UserModel.find("id <> 1").fetch();
		render(users);
    }
    @ExternalRestrictions("Create Crop List")
    public static void croplist() {
		List<UserModel> users = UserModel.find("id <> 1").fetch();
	//Connection conn = play.db.DB.getDBConfig("other").getConnection();
	javax.persistence.EntityManager em = play.db.jpa.JPA.em("other");
	//Query q 

	List<Object[]> types = em.createNativeQuery("SELECT distinct a.type FROM crops a").getResultList();

		render(types);
    }
    @ExternalRestrictions("Create Crop List")
    public static void getcrops() {
	javax.persistence.EntityManager em = play.db.jpa.JPA.em("other");
	List<Object[]> crops = em.createNativeQuery("SELECT a.name, a.type FROM crops a").getResultList();
	renderJSON(crops);
    }
    @ExternalRestrictions("Create Crop List")
    public static void getvarities() {
	javax.persistence.EntityManager em = play.db.jpa.JPA.em("other");
	List<Object[]> varities = em.createNativeQuery("SELECT a.crop_id,a.name, a.local_name, a.spec,a.production_with_irrigation,a.production_without_irrigation,a.life_time, a.special FROM varieties a").getResultList();
	renderJSON(varities);
    }
    @ExternalRestrictions("Create Crop")
    public static void createcrop() {
		List<UserModel> users = UserModel.find("id <> 1").fetch();
		render(users);
    }
    
    @ExternalRestrictions("Crop Management")
	public static void submitCrop(@Valid models.Crop crop){
		validation.valid(crop);
		if(Validation.hasErrors()) {
			flash.error("Customer "+crop.name+" could not be saved!Error="+Validation.errors().toString());
			Logger.info("Error!!  "+ Validation.errors().toString());
			render("@createcrop", crop);
		}
		crop.save();
		List<models.Crop> cropList = models.Crop.findAll();
		render("@croplist",cropList);
	}
    
    @ExternalRestrictions("Crop Management")
	public static void list(){
	List<models.Crop> cropList = models.Crop.findAll();
		render(cropList);
	}
    
    @ExternalRestrictions("Create Main Crop")
    public static void createmaincrop() {
		List<UserModel> users = UserModel.find("id <> 1").fetch();
		render(users);
    }
    
    @ExternalRestrictions("Crop Matrix")
    public static void cropmatrix() {
		List<UserModel> users = UserModel.find("id <> 1").fetch();
		render(users);
    }
    
    @ExternalRestrictions("Update crop price")
    public static void updatecropprice() {
		List<UserModel> users = UserModel.find("id <> 1").fetch();
		render(users);
    }
    @ExternalRestrictions("Create Crop Calendar")
    public static void createcropcalendar() {
    	List<models.Crop> cropList = models.Crop.findAll();
		render(cropList);
    }
    @ExternalRestrictions("Crop Management")
	public static void submitCropCalTask(@Valid models.CropTaskMap cropTaskMap){
    	/*
		validation.valid(cropTask);
		if(Validation.hasErrors()) {
			flash.error("Customer "+cropTask.taskName+" could not be saved!Error="+Validation.errors().toString());
			Logger.info("Error!!  "+ Validation.errors().toString());
			render("@createcropcalendar", cropTask);
		}
		cropTask.save();
		List<models.CropCalenderTask> cropTaskList = models.CropCalenderTask.findAll();*/
    	
    	String cropId = request.params.get("crop.detail");

		String[] replaceNames = params.getAll("taskname");
		String[] replaceDates = params.getAll("taskdate");
		List<CropCalenderTask> taskList = new ArrayList<CropCalenderTask>();
		
		CropCalenderTask cropCalenderTask = null;
		for(int i = 0; replaceNames!=null && i<replaceNames.length;i++)
		{
			cropCalenderTask = new CropCalenderTask();
			cropCalenderTask.taskDateStr = replaceDates[i];
			cropCalenderTask.taskName = replaceNames[i];
			taskList.add(cropCalenderTask);
		}
		cropTaskMap.taskList = taskList;
		cropTaskMap.save();
		List<CropTaskMap> cropTaskMapList = models.CropTaskMap.findAll();
		//render("@cropTaskMaps",cropTaskMaps);
		render("@cropTasklist",cropTaskMapList);
	}
    
    @ExternalRestrictions("Crop Management")
	public static void cropTasklist(){
	List<CropTaskMap> cropTaskMapList = models.CropTaskMap.findAll();
		render(cropTaskMapList);
	}
    
    @ExternalRestrictions("Crop Management")
	public static void createTaskExpenditure(Long id){
    	System.out.println("id:::"+id);
    	CropTaskMap cropTaskMap = models.CropTaskMap.findById(id);
		render(cropTaskMap);
	}
 
    @ExternalRestrictions("View User")
    public static void submit() {
    }

   @ExternalRestrictions("View User")
    public static void otherdb() {
	//Connection conn = play.db.DB.getDBConfig("other").getConnection();
	javax.persistence.EntityManager em = play.db.jpa.JPA.em("other");
	//Query q 
	List<Object[]> crops = em.createNativeQuery("SELECT a.name, a.type FROM crops a").getResultList();
	List<Object[]> types = em.createNativeQuery("SELECT distinct a.type FROM crops a").getResultList();
	List<Object[]> varities = em.createNativeQuery("SELECT a.crop_id,a.name, a.local_name, a.spec,a.production_with_irrigation,a.production_without_irrigation,a.life_time, a.special FROM varieties a").getResultList();
	for (Object[] a : crops) {
	    /*System.out.println("Author "
		    + a[0]
		    + " "
		    + a[1]);
		*/
	}
	
	for (Object a : types) {
	    System.out.println("variety "
		    + a);
	}
	render(crops,varities);
    }
}
